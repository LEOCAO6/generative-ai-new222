From 4b3eb7f7fab2108a3d1f651dc3b335cefca9ce4d Mon Sep 17 00:00:00 2001
From: Rahul-Scalers <rahul@scalers.ai>
Date: Tue, 4 Apr 2023 12:42:57 -0700
Subject: [PATCH] Modified files to work for scalers usecase

---
 README.md          |  4 ++--
 nvgpu/__init__.py  | 39 ++++++++++++++++++++++++++++++---------
 nvgpu/list_gpus.py | 24 +++++++++---------------
 setup.py           | 14 ++++----------
 4 files changed, 45 insertions(+), 36 deletions(-)

diff --git a/README.md b/README.md
index b9f11be..3400331 100644
--- a/README.md
+++ b/README.md
@@ -24,13 +24,13 @@ status in a web application.
 For a user:
 
 ```bash
-pip install nvgpu
+pip install -U nvgpu
 ```
 
 or to the system:
 
 ```bash
-sudo -H pip install nvgpu
+sudo -H pip install -U nvgpu
 ```
 
 ## Usage examples
diff --git a/nvgpu/__init__.py b/nvgpu/__init__.py
index 417e59a..c0a7f2e 100644
--- a/nvgpu/__init__.py
+++ b/nvgpu/__init__.py
@@ -1,15 +1,17 @@
 import re
 import six
 import subprocess
+import pynvml as nv
+from nvgpu.nvml import nvml_context
 
 
 def gpu_info():
     gpus = [line for line in _run_cmd(['nvidia-smi', '-L']) if line]
-    gpu_infos = [re.match('GPU ([0-9]+): (.+?) \(UUID: ([^)]+)\)', gpu) for gpu in gpus]
-    gpu_infos = [info.groups() for info in gpu_infos if info is not None]
+    gpu_infos = [re.match('GPU ([0-9]+): ([^(]+) \(UUID: ([^)]+)\)', gpu).groups() for gpu in gpus]
     gpu_infos = [dict(zip(['index', 'type', 'uuid'], info)) for info in gpu_infos]
     gpu_count = len(gpus)
 
+
     lines = _run_cmd(['nvidia-smi'])
     cuda_version = float(lines[2].split('CUDA Version: ')[1].split(' ')[0])
     if cuda_version < 11:
@@ -18,21 +20,40 @@ def gpu_info():
     else:
         line_distance = 4
         selected_lines = lines[8:8 + line_distance * gpu_count]
-    for i in range(gpu_count):
-        mem_used, mem_total = [int(m.strip().replace('MiB', '')) for m in
-                               selected_lines[line_distance * i + 1].split('|')[2].strip().split('/')]
-        gpu_infos[i]['mem_used'] = mem_used
-        gpu_infos[i]['mem_total'] = mem_total
-        gpu_infos[i]['mem_used_percent'] = 100. * mem_used / mem_total
+    with nvml_context():
+        for i in range(gpu_count):
+            mem_used, mem_total = [int(m.strip().replace('MiB', '')) for m in
+                                selected_lines[line_distance * i + 1].split('|')[2].strip().split('/')]
+            gpu_infos[i]['mem_used'] = mem_used
+            gpu_infos[i]['mem_total'] = mem_total
+            gpu_infos[i]['mem_used_percent'] = 100. * mem_used / mem_total
+
+            handle = nv.nvmlDeviceGetHandleByIndex(i)
+            device_name = nv.nvmlDeviceGetName(handle)
+            temperature = nv.nvmlDeviceGetTemperature(handle, nv.NVML_TEMPERATURE_GPU)
+            gpu_infos[i]['temp'] = temperature
+            utilization = nv.nvmlDeviceGetUtilizationRates(handle).gpu
+            gpu_infos[i]['utilization'] = utilization
+
+            power = nv.nvmlDeviceGetPowerUsage(handle)
+            power_limit = nv.nvmlDeviceGetEnforcedPowerLimit(handle)
+            #fan_speed = nv.nvmlDeviceGetFanSpeed(handle)
+
+            gpu_infos[i]["power_used"] = power/1000 #will make the power used in watts
+            gpu_infos[i]["power_limit"] = power_limit/1000#will make the power in watts
+            #gpu_infos[i]["fan_speed"] = fan_speed
+
+
 
     return gpu_infos
 
 
 def _run_cmd(cmd):
     output = subprocess.check_output(cmd)
-    if isinstance(output, bytes):
+    if six.PY3:
         output = output.decode('UTF-8')
     return output.split('\n')
 
+
 def available_gpus(max_used_percent=20.):
     return [gpu['index'] for gpu in gpu_info() if gpu['mem_used_percent'] <= max_used_percent]
diff --git a/nvgpu/list_gpus.py b/nvgpu/list_gpus.py
index 6e23ffa..c159952 100644
--- a/nvgpu/list_gpus.py
+++ b/nvgpu/list_gpus.py
@@ -1,5 +1,6 @@
 from __future__ import print_function
 
+
 import arrow
 import pandas as pd
 import psutil
@@ -8,27 +9,23 @@ import six
 from tabulate import tabulate
 from termcolor import colored
 
+
 from nvgpu.nvml import nvml_context
 
 
 def device_status(device_index):
     handle = nv.nvmlDeviceGetHandleByIndex(device_index)
     device_name = nv.nvmlDeviceGetName(handle)
-    if isinstance(device_name, bytes):
-        device_name = device_name.decode('UTF-8')
+    if six.PY3:
+        device_name = device_name
     nv_procs = nv.nvmlDeviceGetComputeRunningProcesses(handle)
-    try:
-        utilization = nv.nvmlDeviceGetUtilizationRates(handle).gpu
-    except nv.NVMLError:
-        utilization = None
-
+    utilization = nv.nvmlDeviceGetUtilizationRates(handle).gpu
     if six.PY3:
         clock_mhz = nv.nvmlDeviceGetClockInfo(handle, nv.NVML_CLOCK_SM)
     else:
         # old API in nvidia-ml-py
         clock_mhz = nv.nvmlDeviceGetClock(handle, nv.NVML_CLOCK_SM, 0)
     temperature = nv.nvmlDeviceGetTemperature(handle, nv.NVML_TEMPERATURE_GPU)
-    memory = nv.nvmlDeviceGetMemoryInfo(handle)
     pids = []
     users = []
     dates = []
@@ -51,11 +48,10 @@ def device_status(device_index):
         'users': ','.join(users),
         'running_since': arrow.get(min(dates)).humanize() if len(dates) > 0 else None,
         'utilization': utilization,
-        'memory': memory,
         'clock_mhz': clock_mhz,
         'temperature': temperature,
         'cmd': cmd,
-    }
+        }
 
 
 def parse_cmd_roughly(args):
@@ -77,7 +73,7 @@ def device_statuses():
 
 def device_table(rows):
     df = pd.DataFrame(rows, columns=[
-        'is_available', 'type', 'utilization', 'memory', 'clock_mhz', 'temperature', 'users', 'running_since', 'pids', 'cmd'
+        'is_available', 'type', 'utilization', 'clock_mhz', 'temperature', 'users', 'running_since', 'pids', 'cmd'
     ])
     return df
 
@@ -90,7 +86,6 @@ def format_table(df):
             return '[ ]'
         else:
             return '[~]'
-
     def color_by_status(status):
         if status == '[ ]':
             return 'green'
@@ -102,14 +97,13 @@ def format_table(df):
             raise ValueError(status)
     df['status'] = df.apply(make_status, axis=1)
     df['color'] = df['status'].apply(color_by_status)
-    df['util.'] = df['utilization'].apply(lambda u: '%03s %%' % u if u is not None else 'N/A')
-    df['mem. used'] = df['memory'].apply(lambda m: str(round(m.used / 1000000000., 2)) + "GB")
+    df['util.'] = df['utilization'].apply(lambda u: '%03s %%' % u)
     df['MHz'] = df['clock_mhz']
     df['temp.'] = df['temperature']
     df['since'] = df['running_since']
     for col in ['since', 'cmd']:
         df[col] = df[col].apply(lambda v: v if v is not None else '')
-    cols = ['status', 'type', 'util.', 'mem. used', 'temp.', 'MHz', 'users', 'since', 'pids', 'cmd']
+    cols = ['status', 'type', 'util.', 'temp.', 'MHz', 'users', 'since', 'pids', 'cmd']
     for col in cols:
         df[col] = [colored(row[col], row['color']) for i, row in df.iterrows()]
     df = df[[col for col in cols if col not in ['color']]]
diff --git a/setup.py b/setup.py
index eafae50..ddd7e7c 100644
--- a/setup.py
+++ b/setup.py
@@ -1,15 +1,9 @@
 from setuptools import setup
 
-
-def read_file(path):
-    with open(path, 'r') as f:
-        return f.read()
-
-
 setup(name='nvgpu',
-    version='0.10.0',
+    version='0.9.0',
     description='NVIDIA GPU tools',
-    url='https://github.com/rossumai/nvgpu',
+    url='https://github.com/Rahul-Scalers/nvgpu',
     author='Bohumir Zamecnik, Rossum',
     author_email='bohumir.zamecnik@rossum.ai',
     license='MIT',
@@ -30,8 +24,8 @@ setup(name='nvgpu',
         'termcolor',
         'tabulate',
     ],
-    long_description=read_file('README.md'),
-    long_description_content_type="text/markdown",
+    setup_requires=['setuptools-markdown'],
+    long_description_markdown_filename='README.md',
     # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
     classifiers=[
         # How mature is this project? Common values are
-- 
2.34.0

